pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Clona o seu repositório específico
                git branch: 'main', url: 'https://github.com/nun3/playwrightCICD.git'
            }
        }

        stage('Install Node.js (Cached)') {
            steps {
                sh '''
                    # Verificar se Node.js já está instalado
                    if ! command -v node &> /dev/null; then
                        echo "Instalando Node.js 18..."
                        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
                        apt-get update
                        apt-get install -y nodejs
                    else
                        echo "Node.js já está instalado: $(node --version)"
                    fi
                    
                    # Verificar instalação
                    node --version
                    npm --version
                '''
            }
        }

        stage('Install Dependencies (Cached)') {
            steps {
                sh '''
                    # Usar cache do npm se disponível
                    if [ -f "package-lock.json" ]; then
                        npm ci --cache .npm
                    else
                        npm install --cache .npm
                    fi
                '''
            }
        }

        stage('Install Playwright Browsers (Cached)') {
            steps {
                sh '''
                    # Verificar se browsers já estão instalados
                    if [ ! -d "$HOME/.cache/ms-playwright" ]; then
                        echo "Instalando browsers do Playwright..."
                        npx playwright install --with-deps
                    else
                        echo "Browsers do Playwright já estão instalados"
                    fi
                '''
            }
        }

        stage('Run Playwright Tests') {
            steps {
                sh 'npx playwright test'
            }
        }
    }

    post {
        always {
            // Publicar relatórios HTML
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'playwright-report',
                reportFiles: 'index.html',
                reportName: 'Playwright Test Report'
            ])
            
            // Arquivos de evidência (screenshots, traces)
            archiveArtifacts artifacts: 'test-results/**/*', allowEmptyArchive: true
        }
        
        failure {
            echo 'Pipeline falhou! Verifique os relatórios para mais detalhes.'
        }
        
        success {
            echo 'Pipeline executado com sucesso!'
        }
    }
}
